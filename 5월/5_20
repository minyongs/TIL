## Controller: 웹 요청을 처리하고 비즈니스 로직을 처리한 후 응답을 반환하는 역할.

<aside>
💡 @Controller VS @RestController
</aside>

- `@Controller` : return 값과 일치하는 뷰 템플릿을 찾아서 반환.
- `@RestController` : return 값과 일치하는 데이터 자체를 반환 (`@Controller + @ResponseBody`).

- `@ResponseBody` : 컨트롤러 메서드가 반환하는 값을 직접 클라이언트에게 전달. 즉, return 값 자체를 그대로 반환한다.

<aside>
💡 @RequestParam
</aside>

- HTTP 요청으로 들어온 쿼리파라미터 예) `?name=minhyung` 에서 키값을 통해 value 값을 가져온다.
- `?name=minhyung` 에서 key 값은 `name`, value 값은 `minhyung`.
- `(@RequestParam String name)` → `minhyung` 값을 가져온다.
    - `(@RequestParam(name = “abc”) String name)` → `name`이란 변수에 `?abc=~~` 의 value 를 가져올 수 있다.
    - `required`를 사용하여 필수값인지 결정할 수 있다.
- `HttpServletRequest` 객체를 사용해서 가져오는 방법도 있다!

<aside>
💡 Model 객체
</aside>

- Controller에서 View로 데이터를 전달하기 위해선 중간 객체가 필요하다.
    - Model 객체.

```java
@GetMapping("/welcome")
public String welcome(Model model) { //뷰에다 전달할 것이기 때문에 Model
    model.addAttribute("welcomeMsg", "Welcome to my page!"); // 맡길 때 이름이랑 찾을 때 이름이 일치하면 된다! 

    List<Item> items = Arrays.asList(
        new Item("pen", 3000),
        new Item("notebook", 50000),
        new Item("cup", 2500)
    );

    model.addAttribute("itemList", items); // (템플릿에서 사용할 이름, 객체)
    return "welcome"; // 뷰 템플릿을 반환
}
